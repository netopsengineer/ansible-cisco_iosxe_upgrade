#---
# tasks file for ansible-cisco_ios_upgrade
#
# ██╗ ██████╗ ███████╗        ██╗        ███████╗ █████╗  ██████╗████████╗███████╗
# ██║██╔═══██╗██╔════╝       ███║        ██╔════╝██╔══██╗██╔════╝╚══██╔══╝██╔════╝
# ██║██║   ██║███████╗       ╚██║        █████╗  ███████║██║        ██║   ███████╗
# ██║██║   ██║╚════██║        ██║        ██╔══╝  ██╔══██║██║        ██║   ╚════██║
# ██║╚██████╔╝███████║███████╗██║███████╗██║     ██║  ██║╚██████╗   ██║   ███████║
# ╚═╝ ╚═════╝ ╚══════╝╚══════╝╚═╝╚══════╝╚═╝     ╚═╝  ╚═╝ ╚═════╝   ╚═╝   ╚══════╝
#

- name: ios_1_facts | Define section
  ansible.builtin.set_fact:
    section: "ios_1_facts"
  tags:
    - facts
    - cleaning
    - staging
    - verifying
    - booting

#------------------------------------------------------------------------------
# Extract the Cisco model variant name from the variable ansible_net_model
# (which was created after gathering hardware facts).
#------------------------------------------------------------------------------
- name: ios_1_facts | Determine Cisco model variant
  ansible.builtin.set_fact:
    model_variant: "{{ ansible_net_model 
      | filter_model(
        True 
          if (debug_filter is defined and debug_filter) 
          else False ) }}"
    device_next_step: "cleaning"
  tags:
    - facts
    - cleaning
    - staging
    - verifying
    - booting

#------------------------------------------------------------------------------
# Asserts given expressions are true.
# Validate the newly created variable model_variant
#------------------------------------------------------------------------------
- name: ios_1_facts | Validate Cisco model variant
  ansible.builtin.assert:
    that:
      - model_variant is defined
      - model_variant|length > 0
    fail_msg: "Unable to collect the Cisco model variant from {{ ansible_net_model }}"
    quiet: true
  tags:
    - facts
    - cleaning
    - staging
    - verifying
    - booting

#------------------------------------------------------------------------------
# Load the dependent model variant file
# Required keynames are :
#   model_supported       <Boolean>
#   required_ios_binary   <string>
#   required_ios_md5      <string>
#   required_ios_sha512   <string>
#   required_ios_size_kb  <integer>
#   required_ios_version  <string>
#   use_signature         <string>
#------------------------------------------------------------------------------
- name: ios_1_facts | Load dependent variables
  include_vars: "{{lookup('first_found', params)}}"
  vars:
    params:
      files:
        - "{{ ansible_net_iostype|upper }}/{{ model_variant }}/{{ ansible_net_model }}.yml"
        - "{{ ansible_net_iostype|upper }}/{{ model_variant }}/{{ model_variant }}.yml"
        - unknown.yml
      paths:
        - "vars"
  tags:
    - facts
    - cleaning
    - staging
    - verifying
    - booting

#------------------------------------------------------------------------------
# Asserts given expressions are true.
# If the "model_supported" is set with the boolean TRUE then continue
# else don't progress any other tasks and set for the remote device as failure.
#------------------------------------------------------------------------------
- name: ios_1_facts | Model is supported
  ansible.builtin.assert:
    that:
      - model_supported
    fail_msg: "The model variant is not supported."
    quiet: true
  tags:
    - facts
    - cleaning
    - staging
    - verifying
    - booting

#------------------------------------------------------------------------------
# Run several Cisco commands to process later on the command output
#------------------------------------------------------------------------------
- name: ios_1_facts | Run exec commands
  register: commands_output_list
  cisco.ios.ios_command:
    commands:
      - show version
      - show ?
  tags:
    - facts
    - cleaning
    - staging
    - verifying
    - booting

- name: ios_1_facts 
  when:
    - required_ios_version is defined
  block:

    #       _                                        _             
    #   ___| |__   _____      __ __   _____ _ __ ___(_) ___  _ __  
    #  / __| '_ \ / _ \ \ /\ / / \ \ / / _ \ '__/ __| |/ _ \| '_ \ 
    #  \__ \ | | | (_) \ V  V /   \ V /  __/ |  \__ \ | (_) | | | |
    #  |___/_| |_|\___/ \_/\_/     \_/ \___|_|  |___/_|\___/|_| |_|
    #
    #--------------------------------------------------------------------------
    # Build device_version_info
    #--------------------------------------------------------------------------
    - include: "{{ ansible_net_iostype|upper }}/facts/{{ ansible_net_iostype|lower}}_version.yml"
      when: commands_output_list.stdout|length > 0
    
    #       _                                  _ _       _     
    #   ___| |__   _____      __  _____      _(_) |_ ___| |__  
    #  / __| '_ \ / _ \ \ /\ / / / __\ \ /\ / / | __/ __| '_ \ 
    #  \__ \ | | | (_) \ V  V /  \__ \\ V  V /| | || (__| | | |
    #  |___/_| |_|\___/ \_/\_/   |___/ \_/\_/ |_|\__\___|_| |_|
    #                                                      
    #--------------------------------------------------------------------------
    # Build device_switch_info
    #--------------------------------------------------------------------------
    - include: "{{ ansible_net_iostype|upper }}/facts/{{ ansible_net_iostype|lower}}_switch.yml"
      when: commands_output_list.stdout|length > 1
    
    #    __ _           _  _     _       
    #   / _(_)_ __   __| || |__ (_)_ __  
    #  | |_| | '_ \ / _` || '_ \| | '_ \ 
    #  |  _| | | | | (_| || |_) | | | | |
    #  |_| |_|_| |_|\__,_||_.__/|_|_| |_|
    #
    #--------------------------------------------------------------------------
    # Check if binary file already exist on active filesystem
    #--------------------------------------------------------------------------
    - include: "{{ ansible_net_iostype|upper }}/facts/{{ ansible_net_iostype|lower}}_findbin.yml"

    #       _                      __ _ _                     _                 
    #   ___| |__   _____      __  / _(_) | ___  ___ _   _ ___| |_ ___ _ __ ___  
    #  / __| '_ \ / _ \ \ /\ / / | |_| | |/ _ \/ __| | | / __| __/ _ \ '_ ` _ \ 
    #  \__ \ | | | (_) \ V  V /  |  _| | |  __/\__ \ |_| \__ \ ||  __/ | | | | |
    #  |___/_| |_|\___/ \_/\_/   |_| |_|_|\___||___/\__, |___/\__\___|_| |_| |_|
    #                                               |___/                       
    #
    #--------------------------------------------------------------------------
    # Build device_filesystem, device_filesystem_list and device_filesystem_info
    #--------------------------------------------------------------------------
    - include: "{{ ansible_net_iostype|upper }}/facts/{{ ansible_net_iostype|lower}}_filesystem.yml"
      
  tags:
    - facts
    - cleaning
    - staging
    - verifying
    - installing
    - booting
    
#--------------------------------------------------------------------------
# Define the next step
#--------------------------------------------------------------------------
- name: ios_1_facts | Next step
  when:
    - required_ios_version != ansible_net_version
    - required_ios_binary != ansible_net_image
    - not using_tag
  ansible.builtin.set_fact:
    ios_next_step: "{{
      (
        'cleaning'
          if (cleaning is defined and cleaning)
          else 'staging'
      ) 
        if 
          (
            not found_required_file
          ) else 'verifying'
    }}"
  
#                       _ _   
#   _ __ ___  ___ _   _| | |_ 
#  | '__/ _ \/ __| | | | | __|
#  | | |  __/\__ \ |_| | | |_ 
#  |_|  \___||___/\__,_|_|\__|
#
#--------------------------------------------------------------------------
# Display result status
#--------------------------------------------------------------------------
- name: ios_1_facts | Results
  ansible.builtin.debug:
    msg:
      - "{{ inventory_hostname  }} is classified as 
          {{ device_product }} product ({{ model_variant }})
          {{
            ( 
              'with '
                if (show_switch)
                else 'without ' 
            ) + 'stack functionality.'
              if (device_product|lower == 'switch') 
              else '.'
          }}"
      - "The current running IOS version is {{ ansible_net_version }} 
          {{ 
            ('but require to have version ' + required_ios_version) 
              if (required_ios_version != ansible_net_version) 
              else 
                (
                  'which is the required IOS version'
                ) 
          }}."     
      - "The required binary file {{ required_ios_binary }}
          {{
            (
              (
                'has not'
                  if (not found_required_file)
                  else 'has'
              ) + ' be found on required filesystem(s) ' 
                + ( device_filesystem_info.keys() | list |  string )
            ) if 
              ( 
                ( 
                  required_ios_version != ansible_net_version 
                ) and 
                (
                  required_ios_binary != ansible_net_image
                )
              )
              else 'is our running IOS image.'
          }}"
      - "{{
            (
              (
                'Next step is ' + ios_next_step
              ) if 
                  ( 
                    ( 
                      required_ios_version != ansible_net_version 
                    ) and 
                    (
                      required_ios_binary != ansible_net_image
                    )
                  )
                else 'No further steps are needed.'
            ) if
                (
                  not using_tag
                ) 
              else 
                (
                  (
                    'Ending of tag facts.'
                  ) if 
                      (
                        ios_next_step|lower == 'facts'
                      )
                    else ( 'Next step is ' + ios_next_step )
                )
          }}"
  tags:
    - facts
    - cleaning
    - staging
    - verifying
    - booting

