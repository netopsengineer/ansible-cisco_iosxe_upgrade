---
# tasks file for ansible-cisco_ios_upgrade
#
# ██╗ ██████╗ ███████╗        ██████╗         ███████╗████████╗ █████╗  ██████╗ ██╗███╗   ██╗ ██████╗ 
# ██║██╔═══██╗██╔════╝        ╚════██╗        ██╔════╝╚══██╔══╝██╔══██╗██╔════╝ ██║████╗  ██║██╔════╝ 
# ██║██║   ██║███████╗         █████╔╝        ███████╗   ██║   ███████║██║  ███╗██║██╔██╗ ██║██║  ███╗
# ██║██║   ██║╚════██║         ╚═══██╗        ╚════██║   ██║   ██╔══██║██║   ██║██║██║╚██╗██║██║   ██║
# ██║╚██████╔╝███████║███████╗██████╔╝███████╗███████║   ██║   ██║  ██║╚██████╔╝██║██║ ╚████║╚██████╔╝
# ╚═╝ ╚═════╝ ╚══════╝╚══════╝╚═════╝ ╚══════╝╚══════╝   ╚═╝   ╚═╝  ╚═╝ ╚═════╝ ╚═╝╚═╝  ╚═══╝ ╚═════╝ 
# 

- name: ios_3_staging | Define section
  ansible.builtin.set_fact:
    section: "ios_3_staging"
  tags:
    - staging

- name: ios_3_staging
  when: 
    - not found_required_file
  block:

    
    #--------------------------------------------------------------------------
    # Foreach required filesystem to check if there is enough space to add
    # the required IOS image.
    #--------------------------------------------------------------------------
    - name: ios_3_staging | Enough space on filesystem?
      ansible.builtin.assert:
        that:
          - "device_filesystem_info[item]['free_kb'] > required_ios_size_kb"
        fail_msg: "Not enough space left to store the required IOS image"
      with_items: "{{ device_filesystem_info.keys() | list }}"

    #--------------------------------------------------------------------------
    # Determine how to get the latest image on the device.
    #--------------------------------------------------------------------------
    - name: ios_3_staging | Data download or upload
      ansible.builtin.set_fact:
        data_transfer: "{{ 
              ( 'download'
                  if (data_transfer|lower == 'download' )
                  else 'upload'
              )
                if (data_transfer is defined)
                else 'upload'
          }}"

    #--------------------------------------------------------------------------
    # example:
    # data_transfer = "upload"
    #--------------------------------------------------------------------------
    - name: ios_3_staging | Debug
      when: debug_all or debug_ios
      ansible.builtin.debug: var=data_transfer
    
    #--------------------------------------------------------------------------
    # Data_transfer is set as download.
    #--------------------------------------------------------------------------
    - name: ios_3_staging | download
      when: data_transfer|lower  == "download"
      block:

        #----------------------------------------------------------------------
        # Download IOS image from a specific remote SSH server requires to have 
        # the following variables:
        #   - remote_scp_server
        #   - remote_scp_user
        #   - remote_scp_password
        #----------------------------------------------------------------------
        - name: ios_3_staging | download | Verify remote variables
          ansible.builtin.assert:
            that:
              - remote_ssh_servers is defined
              - remote_ssh_user is defined
              - remote_ssh_password is defined
            msg: "data_transfer is set for download image from remote SSH 
                  server that requires the following variables: 
                  [ 'remote_ssh_password', 'remote_ssh_servers',
                  'remote_ssh_user' ]"

        #----------------------------------------------------------------------
        # Create directory on the root of the filesystem that contains the 
        # same name structure as the required IOS image filename but without
        # the file extension.
        #----------------------------------------------------------------------
        - name: ios_3_staging | download | Create directory
          vars:
            ansible_command_timeout: 600
          cisco.ios.ios_command:      
            commands:
              - command: "mkdir {{ item }}{{ required_ios_binary[:-4] }}"
                prompt: 'Create directory filename \[{{ required_ios_binary[:-4] }}\]?'
                answer: "\r" 
          with_items: "{{ device_filesystem_info.keys() | list }}"

        #----------------------------------------------------------------------
        # copy scp: flash:<IOS_directory>/<image_name>
        #----------------------------------------------------------------------
        - name: ios_3_staging | download | Copy file from remote SSH server to network device
          vars:
            ansible_command_timeout: 3600
          cisco.ios.ios_command:
            commands:
              - command: copy scp://{{ remote_ssh_user }}:{{ remote_ssh_password }}@{{remote_ssh_servers | random }}/{{ required_ios_binary }} {{ filesystem }}/{{ required_ios_binary[:-4] }}/{{ required_ios_binary }}
                prompt: 'Destination filename \[/{{ required_ios_binary[:-4] }}/{{ required_ios_binary }}\]?'
                answer: "\r"
          loop_control:
            loop_var: filesystem
          with_items: "{{ device_filesystem_info.keys() | list }}"

    #--------------------------------------------------------------------------
    # Data_transfer is set as upload.
    #--------------------------------------------------------------------------
    - name: ios_3_staging | upload
      when: data_transfer|lower  == "upload"
      block:

        #----------------------------------------------------------------------
        # Create directory on the root of the filesystem that contains the 
        # same name structure as the required IOS image filename but without
        # the file extension.
        #----------------------------------------------------------------------
        - name: ios_3_staging | upload | Create directory
          vars:
            ansible_command_timeout: 600
          cisco.ios.ios_command:      
            commands:
              - command: "mkdir {{ item }}{{ required_ios_binary[:-4] }}"
                prompt: 'Create directory filename \[{{ required_ios_binary[:-4] }}\]?'
                answer: "\r" 
          with_items: "{{ device_filesystem_info.keys() | list }}"

        #----------------------------------------------------------------------
        # Upload the IOS image from Ansible Controller
        #----------------------------------------------------------------------
        - name: ios_3_staging | upload | Copy file from Ansible Controller to network device
          vars:
            ansible_command_timeout: 3600
          ansible.netcommon.net_put:
            src: 'files/{{ ansible_net_iostype|upper }}/{{ model_variant }}/{{ required_ios_binary }}'
            protocol: scp
            dest: '{{ filesystem }}{{ required_ios_binary[:-4] }}/{{ required_ios_binary }}'
          loop_control:
            loop_var: filesystem
          with_items: "{{ device_filesystem_info.keys() | list }}"

    #    __ _           _  _     _       
    #   / _(_)_ __   __| || |__ (_)_ __  
    #  | |_| | '_ \ / _` || '_ \| | '_ \ 
    #  |  _| | | | | (_| || |_) | | | | |
    #  |_| |_|_| |_|\__,_||_.__/|_|_| |_|
    #
    #--------------------------------------------------------------------------
    # Check if binary file already exist on active filesystem
    #--------------------------------------------------------------------------
    - include: "{{ ansible_net_iostype|upper }}/facts/{{ ansible_net_iostype|lower}}_findbin.yml"

  tags:
    - staging

#------------------------------------------------------------------------------
# Define the next step
#------------------------------------------------------------------------------
- name: ios_3_staging | Next step
  ansible.builtin.set_fact:
    ios_next_step: "verifying"

#                       _ _   
#   _ __ ___  ___ _   _| | |_ 
#  | '__/ _ \/ __| | | | | __|
#  | | |  __/\__ \ |_| | | |_ 
#  |_|  \___||___/\__,_|_|\__|
#
#------------------------------------------------------------------------------
# Display result status
#------------------------------------------------------------------------------
- name: ios_3_staging | Results
  ansible.builtin.debug:
    msg:
      - "{{ 'Required IOS image found on filesystem.' 
            if ( found_required_file )
            else 
              (
                'Unable to find the IOS image on device filesystem.'
              )
        }}"
      - "{{
          (
            'Next step is ' + ios_next_step
          ) if
            (
              not using_tag
            ) 
          else 
            (
              (
                'Ending of tag staging.'
              ) if 
                  (
                    ios_next_step|lower == 'staging'
                  )
                else ( 'Next step is ' + ios_next_step )
            )
        }}"
  tags:
    - staging

    
